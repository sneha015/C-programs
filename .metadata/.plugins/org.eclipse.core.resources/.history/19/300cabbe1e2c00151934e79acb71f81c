#include<iostream>
//const int N = 5;

using namespace std;

class knightsTour
{
public:
	void printTour();
	knightsTour(int n);
	bool moveLegal(int row,int col);
	bool boardTrace();
	bool knightsPath(int row, int col, int move,int rowAdd[8], int colAdd[8]);

private:
	int N;
	int **board;
	int *rowAdd;
	int *colAdd;
};

knightsTour::knightsTour(int n)
{
	N = n;
	for (int row = 0; row < n; row++)
		board[row] = new int[n];
	rowAdd = new int[8];
	colAdd = new int[8];
	rowAdd={-2,-2,-1,-1,1,1,2,2};
	colAdd={-1,1,-2,2,-2,2,-1,1};
}

bool knightsTour::moveLegal(int row,int col)
{
	if(row>=0 && row<N && col>=0 && col<N && (board[row][col] == -1))
		return true;
	else
		return false;
}

void knightsTour::printTour()
{
	for(int i=0; i<N; i++)
	{
		for(int j=0; j<N; j++)
		{
			cout<<"\t"<<board[i][j];
		}
		cout<<"\n";
	}
}

bool knightsTour::boardTrace()
{
	int move;

	//int rowAdd[8]={-2,-2,-1,-1,1,1,2,2};
	//int colAdd[8]={-1,1,-2,2,-2,2,-1,1};

	for(int i=0; i<N; i++)
	{
		for(int j=0; j<N; j++)
			board[i][j]= -1;
	}
	move=1;
	board[0][0]=move;

	if(knightsPath(0, 0, move+1, rowAdd, colAdd))
	{
		printTour();
		return true;
	}else
	{
		cout<<"There is no solution!! \n";
		return false;
	}


}

bool knightsTour::knightsPath(int row, int col, int move, int colAdd[8], int rowAdd[8])
{
	int nextRow, nextCol;
	if(move-1 == N*N)
	{
		return true;
	}

	for(int i=0; i<8; i++)
	{
		nextRow = row + rowAdd[i];
		nextCol = col + colAdd[i];

		if(moveLegal(nextRow, nextCol))
		{
			board[nextRow][nextCol]= move;

			if(knightsPath(nextRow, nextCol, move+1, rowAdd, colAdd))
			return true;
			else
			board[nextRow][nextCol]= -1;
		}
	}
	return false;
}
